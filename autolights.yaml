blueprint:
  name: Autolights
  source_url: https://raw.githubusercontent.com/vqvu/home-assistant-blueprints/master/autolights.yaml
  description: |
    Turn on a light when motion is detected.

    Can be enabled and disabled using a binary sensor.
  domain: automation
  input:
    motion_entity:
      name: Motion Sensor
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean

    target_lights:
      name: Lights
      description: The lights to control. May be a group of lights.
      selector:
        entity:
          domain: light
          multiple: true

    target_scenes:
      name: Scenes
      description: The scenes to use. Should turn on the selected lights.
      selector:
        entity:
          domain: scene
          multiple: true

    enable_entities:
      name: Enable entities
      description: >
        Entities that will enable the automation. For example, a time-of-day helper.
        If there are multiple entities, the automation will be enabled when any of
        the entities are on.
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean
          multiple: true

    suppress_entity:
      name: Suppress entity
      description: >
        An entity that will suppress the automation. For example, a toggle helper. If "on", this
        entity disables the automation regardless of the value of the "Enable entity".
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean

    wait_timer:
      name: Wait timer
      description: A timer device that determines how long to leave the light on after last motion is detected.
      selector:
        entity:
          domain: timer

    warning_delay:
      name: Warning delay
      description: How long to wait in the warning state.
      default:
        minutes: 1
      selector:
        duration:

mode: queued
max_exceeded: warning

variables:
  inputs:
    motion_entity: !input motion_entity
    target_lights: !input target_lights
    target_scenes: !input target_scenes
    enable_entities: !input enable_entities
    suppress_entity: !input suppress_entity
    wait_timer: !input wait_timer
    warning_delay: !input warning_delay

trigger:
  - id: motion_entity_changed
    platform: state
    entity_id: !input motion_entity
    to:

  - id: enable_entities_changed
    platform: state
    entity_id: !input enable_entities
    from:

  - id: suppress_entity_to_on
    platform: state
    entity_id: !input suppress_entity
    from: "on"
    to: "off"

  - id: timer_finished
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input wait_timer

  - id: warning_timer_finished
    platform: event
    event_type: vqvu.async_wait.ping_response
    event_data:
      payload:
        for:
          timer: !input wait_timer

condition:
  - alias: "Automation should not be suppressed"
    condition: state
    entity_id: !input suppress_entity
    state: "off"

  - alias: "Warning timer finished is for this automation"
    condition: template
    value_template: >
      {{ trigger.id != 'warning_timer_finished'
          or trigger.event.data.headers.to == this.attributes.id }}

action:
  - alias: "Compute input states"
    variables:
      input_states:
        motion: "{{ states(inputs.motion_entity) }}"
        motion_to_on: "{{ trigger.id == 'motion_entity_changed' and trigger.to_state.state == 'on' }}"
        motion_to_off: "{{ trigger.id == 'motion_entity_changed' and trigger.to_state.state == 'off' }}"

        lights: >
          {% set ns = namespace(is_on=((inputs.target_lights | length) > 0)) %}
          {% for light in inputs.target_lights %}
            {% set ns.is_on = ns.is_on and is_state(light, 'on') %}
          {% endfor %}
          {{ 'on' if ns.is_on else 'off' }}

        automation: >
          {% set ns = namespace(is_on=false)%}
          {% for entity in inputs.enable_entities %}
            {% set ns.is_on = ns.is_on or is_state(entity, 'on') %}
          {% endfor %}
          {{ 'on' if ns.is_on else 'off' }}
        single_automation_entity_to_on: >
          {{ trigger.id == 'enable_entities_changed' and trigger.to_state.state == 'on' }}

        timer: "{{ states(inputs.wait_timer) }}"
        timer_finished: "{{ trigger.id == 'timer_finished' }}"

  - alias: "Compute actions"
    variables:
      actions:
        lights: >
          {% if input_states.single_automation_entity_to_on
              or input_states.automation == 'off'
              or input_states.motion_to_off %}
            none
          {% elif input_states.motion_to_on %}
            turn_on_forced
          {% elif input_states.motion == 'on' or input_states.timer != 'idle' %}
            turn_on
          {% elif input_states.timer_finished %}
            turn_off_warning
          {% else %}
            turn_off
          {% endif %}
        timer: >
          {% if input_states.automation == 'off' or input_states.motion == 'on' %}
            cancel
          {% elif input_states.single_automation_entity_to_on and input_states.lights == 'on' %}
            start
          {% elif input_states.motion_to_off and input_states.lights == 'on' %}
            reset
          {% else %}
            none
          {% endif %}

  - alias: "Control lights if needed"
    choose:
      - alias: "Turn lights on"
        conditions: >
          {{
            actions.lights == 'turn_on_forced'
              or (actions.lights == 'turn_on' and input_states.lights != 'on')
          }}
        sequence:
          - alias: "Turn on the scene"
            service: scene.turn_on
            target:
              entity_id: !input target_scenes
      - alias: "Warn lights will turn off"
        conditions: "{{ actions.lights == 'turn_off_warning' and input_states.lights != 'off' }}"
        sequence:
          - alias: "Turn light to 50%"
            service: light.turn_on
            target:
              entity_id: !input target_lights
            data:
              brightness_pct: 50
              transition: 2
          - alias: "Async wait until warning period ends"
            event: vqvu.async_wait.ping_request
            event_data:
              headers: >
                {{
                  {
                    'from': this.attributes.id,
                  }
                }}
              payload: >
                {{
                  {
                    'delay': inputs.warning_delay,
                    'reply': {
                      'for': {
                        'timer': inputs.wait_timer,
                      },
                    },
                  }
                }}
      - alias: "Turn lights off"
        conditions: "{{ actions.lights == 'turn_off' and input_states.lights != 'off' }}"
        sequence:
          - alias: "Turn off the lights"
            service: light.turn_off
            target:
              entity_id: !input target_lights
            data:
              transition: 2

  - alias: "Control timer if needed"
    choose:
      - alias: "Cancel timer"
        conditions: "{{ actions.timer == 'cancel' and input_states.timer != 'idle' }}"
        sequence:
          - alias: "Cancel the timer"
            service: timer.cancel
            target:
              entity_id: !input wait_timer
      - alias: "Start timer"
        conditions: "{{ actions.timer == 'start' and input_states.timer != 'active' }}"
        sequence:
          - alias: "Start the timer"
            service: timer.start
            target:
              entity_id: !input wait_timer
      - alias: "Reset timer"
        conditions: "{{ actions.timer == 'reset' }}"
        sequence:
          - alias: "Cancel the timer"
            service: timer.cancel
            target:
              entity_id: !input wait_timer
          - alias: "Start the timer"
            service: timer.start
            target:
              entity_id: !input wait_timer
