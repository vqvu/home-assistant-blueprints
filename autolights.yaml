blueprint:
  name: Autolights
  source_url: https://raw.githubusercontent.com/vqvu/home-assistant-blueprints/master/autolights.yaml
  description: |
    Turn on a light when human presence is detected.

    Can be enabled and disabled using a binary sensor.
  domain: automation
  input:
    presence_entity:
      name: Presence Sensor
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean

    target_lights:
      name: Lights
      description: The lights to control. May be a group of lights.
      selector:
        entity:
          domain: light
          multiple: true

    target_scenes:
      name: Scenes
      description: The scenes to use. Should turn on the selected lights.
      selector:
        entity:
          domain: scene
          multiple: true

    enable_entities:
      name: Enable entities
      description: >
        Entities that will enable the automation. For example, a time-of-day helper.
        If there are multiple entities, the automation will be enabled when any of
        the entities are on.
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean
          multiple: true

    suppress_entity:
      name: Suppress entity
      description: >
        An entity that will suppress the automation. For example, a toggle helper. If "on", this
        entity disables the automation regardless of the value of the "Enable entity".
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean

    wait_timer:
      name: Wait timer
      description: A timer device that determines how long to leave the light on after last presence is detected.
      selector:
        entity:
          domain: timer

    warning_delay:
      name: Warning delay
      description: How long to wait in the warning state.
      default:
        minutes: 1
      selector:
        duration:

mode: queued
max_exceeded: warning

variables:
  inputs:
    presence_entity: !input presence_entity
    target_lights: !input target_lights
    target_scenes: !input target_scenes
    enable_entities: !input enable_entities
    suppress_entity: !input suppress_entity
    wait_timer: !input wait_timer
    warning_delay: !input warning_delay

trigger:
  - id: presence_entity_changed
    platform: state
    entity_id: !input presence_entity
    not_from:
      - unavailable
      - unknown
    not_to:
      - unavailable
      - unknown

  - id: enable_entities_changed
    platform: state
    entity_id: !input enable_entities
    from:

  - id: suppress_entity_to_off
    platform: state
    entity_id: !input suppress_entity
    from: "on"
    to: "off"

  - id: timer_finished
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input wait_timer

  - id: warning_timer_finished
    platform: event
    event_type: vqvu.async_wait_service.wait_response
    event_data:
      payload:
        for:
          timer: !input wait_timer

condition:
  - alias: "Automation should not be suppressed"
    condition: state
    entity_id: !input suppress_entity
    state: "off"

  - alias: "Warning timer finished is for this automation"
    condition: template
    value_template: >
      {{ trigger.id != 'warning_timer_finished'
          or trigger.event.data.headers.to == this.attributes.id }}

action:
  - alias: "Compute facts"
    variables:
      facts:
        presence: "{{ states(inputs.presence_entity) }}"
        presence_to_on: "{{ trigger.id == 'presence_entity_changed' and trigger.to_state.state == 'on' }}"
        presence_to_off: "{{ trigger.id == 'presence_entity_changed' and trigger.to_state.state == 'off' }}"

        num_lights_total: "{{ inputs.target_lights | length }}"
        num_lights_on: "{{ inputs.target_lights | select('is_state', 'on') | list | length }}"
        # Expected warning brightness is 128.
        num_lights_near_warning_brightness: >
          {{
              inputs.target_lights
                  | map('state_attr', 'brightness')
                  | select('ne', None)
                  | select('gt', 126)
                  | select('lt', 130)
                  | list
                  | length
          }}

        automation: >
          {% set enable_entities_on = inputs.enable_entities | select('is_state', 'on') | list %}
          {% set automation_on = (enable_entities_on | length) > 0 %}
          {% set automation_suppressed = states(inputs.suppress_entity) == 'on' %}
          {{ 'on' if (automation_on and not automation_suppressed) else 'off' }}

        timer: "{{ states(inputs.wait_timer) }}"
        timer_finished: "{{ trigger.id == 'timer_finished' }}"

        warning_timer_finished: "{{ trigger.id == 'warning_timer_finished' }}"
  
  - alias: "Compute current automation state"
    variables:
      # States are:
      #  - suppressed: The automation is suppressed. It should not interact with the lights.
      #  - person_present:
      #       The automation is enabled and a person is present.
      #  - person_not_present_lights_on:
      #       The automation is enabled and a person is not present, but the lights are on. This
      #       is a grace period where the lights stay on in case the person comes back.
      #  - person_not_present_lights_off_warning: 
      #       The automation is enabled and a person is not present and the lights are at 50%.
      #       This is a warning state where the lights will turn off soon.
      #  - person_not_present_lights_off:
      #       The automation is enabled and a person is not present and the lights are off.
      current_state: >
        {% set all_lights_off = facts.num_lights_on == 0 %}
        {% set all_near_warning_brightness = facts.num_lights_near_warning_brightness == facts.num_lights_total %}

        {% if facts.automation == 'off' %}
          suppressed
        {% elif facts.presence == 'on' %}
          person_present
        {% else %}

          {% if all_lights_off %}
            person_not_present_lights_off
          {% elif all_near_warning_brightness %}
            person_not_present_lights_off_warning
          {% else %}
            person_not_present_lights_on
          {% endif %}

        {% endif %}

  - alias: "Compute actions"
    variables:
      actions: >
        {% set lights = 'none' %}
        {% set timer = 'none' %}
        {% if current_state == 'suppressed' %}
          {# Suppressed, do nothing #}
        {% elif facts.presence == 'on' %}
          {% set timer = 'cancel' %}
          {% if facts.presence_to_on %}
            {% set lights = 'turn_on_forced' %}
          {% endif %}
        {% elif current_state == 'person_not_present_lights_off' %}
          {# Lights are off and person is not present. We don't need to do anything more. #}
        {% else %}

          {% if facts.presence_to_off %}
            {% set timer = 'reset' %}
          {% elif facts.timer_finished %}
            {% set lights = 'turn_off_warning' %}
          {% elif current_state == 'person_not_present_lights_on' %}
            {% set timer = 'start_if_not_running' %}
          {% elif facts.warning_timer_finished %}

            {% if current_state == 'person_not_present_lights_off_warning' %}
              {% set lights = 'turn_off' %}
            {% endif %}

          {% endif %}

        {% endif %}

        {{ { 'lights': lights, 'timer': timer } }}

  - alias: "Control lights if needed"
    choose:
      - alias: "Turn lights on"
        conditions: >
          {{
            actions.lights == 'turn_on_forced'
              or (actions.lights == 'turn_on' and facts.lights != 'on')
          }}
        sequence:
          - alias: "Turn on the scene"
            service: scene.turn_on
            target:
              entity_id: !input target_scenes
      - alias: "Warn lights will turn off"
        conditions: "{{ actions.lights == 'turn_off_warning' and facts.lights != 'off' }}"
        sequence:
          - alias: "Turn light to 50%"
            service: light.turn_on
            target:
              entity_id: !input target_lights
            data:
              brightness: 128
              transition: 2
          - alias: "Async wait until warning period ends"
            event: vqvu.async_wait_service.wait_request
            event_data:
              headers: >
                {{
                  {
                    'from': this.attributes.id,
                  }
                }}
              payload: >
                {{
                  {
                    'delay': inputs.warning_delay,
                    'reply': {
                      'for': {
                        'timer': inputs.wait_timer,
                      },
                    },
                  }
                }}
      - alias: "Turn lights off"
        conditions: "{{ actions.lights == 'turn_off' and facts.lights != 'off' }}"
        sequence:
          - alias: "Turn off the lights"
            service: light.turn_off
            target:
              entity_id: !input target_lights
            data:
              transition: 2

  - alias: "Control timer if needed"
    choose:
      - alias: "Cancel timer"
        conditions: "{{ actions.timer == 'cancel' and facts.timer != 'idle' }}"
        sequence:
          - alias: "Cancel the timer"
            service: timer.cancel
            target:
              entity_id: !input wait_timer
      - alias: "Start timer"
        conditions: "{{ actions.timer == 'start_if_not_running' and facts.timer != 'active' }}"
        sequence:
          - alias: "Start the timer"
            service: timer.start
            target:
              entity_id: !input wait_timer
      - alias: "Reset timer"
        conditions: "{{ actions.timer == 'reset' }}"
        sequence:
          - alias: "Cancel the timer"
            service: timer.cancel
            target:
              entity_id: !input wait_timer
          - alias: "Start the timer"
            service: timer.start
            target:
              entity_id: !input wait_timer
