blueprint:
  name: Autobeacon
  source_url: https://raw.githubusercontent.com/vqvu/home-assistant-blueprints/master/async_wait_service.yaml
  description: |
    Turns on and off the Home Assistant companion app's BLE beacon when the
    person is home or away.
  domain: automation
  input:
    tracker_entities:
      name: Trackers
      selector:
        entity:
          domain:
            - person
            - device_tracker
          multiple: true

    zone:
      name: Zones
      selector:
        entity:
          domain: zone

    mobile_app:
      name: Mobile App
      selector:
        device:
          integration: mobile_app

    enable_periodic_checks:
      name: Enable periodic checks
      description: >
        If true, the automation will periodically check the state of the beacon
        and turn it on or off as appropriate. Enabling this check will prevent
        manual changes to the beacon state from sticking.
      default: true
      selector:
        boolean:

mode: queued
max_exceeded: warning

variables:
  inputs:
    tracker_entities: !input tracker_entities
    zones:
      - !input zone
    mobile_app: !input mobile_app
    enable_periodic_checks: !input enable_periodic_checks

trigger:
  - id: zones_entered
    platform: zone
    entity_id: !input tracker_entities
    zone: !input zone
    event: enter

  - id: zones_exited
    platform: zone
    entity_id: !input tracker_entities
    zone: !input zone
    event: leave

  - id: periodic_check_triggered
    platform: time_pattern
    hours: "*"

condition:
  - alias: "If a period trigger, then peridic check should be enabled."
    condition: template
    value_template: >
      {{ trigger.id != periodic_check_triggered
          or inputs.enable_periodic_checks }}

action:
  - alias: "Compute input states (step 1)"
    variables:
      input_states1:
        app_notify_service: >
          notify.mobile_app_{{ device_attr(inputs.mobile_app, 'name') | slugify(separator='_') }}
        # Hack to build an dynamic array.
        zone_state_names: >
          [
            {% for zone in inputs.zones %}
              {% set friendly_name = state_attr(zone, 'friendly_name') %}
              {% if zone == 'zone.home' %}
                "home"
              {% elif friendly_name is none %}
                "{{ zone | replace('zone.', '') | replace('_', ' ') }}"
              {% else %}
                "{{ friendly_name }}"
              {% endif %}
              ,
            {% endfor %}
          ]

  - alias: "Compute input states (step 2)"
    variables:
      input_states2:
        entities_in_zone: >
          {% set entities_in_zone = inputs.tracker_entities | map('states') | select('in', input_states1.zone_state_names) | list %}
          {{ (entities_in_zone | length) == (inputs.tracker_entities | length)}}

  - alias: "Compute actions"
    variables:
      actions:
        beacon: >
          {% if input_states2.entities_in_zone %}
            turn_on
          {% else %}
            turn_off
          {% endif %}

  - alias: "sync beacon transmission state"
    service: "{{ input_states1.app_notify_service }}"
    data:
      message: "command_ble_transmitter"
      data:
        command: "{{ actions.beacon }}"
